"""
Django settings for project_config project.

Generated by 'django-admin startproject' using Django 2.1.15.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import dj_database_url
# Import the file that has the environment variables
if os.path.exists("env.py"):
    import env as env_variables

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# If an env file exists retrieve the secret key from it
if os.path.exists("env.py"):
    print("Using secret key contained in env file")
    SECRET_KEY = env_variables.get_django_secret()
else:
    print("Unable to retrieve django secret key from env file")
    SECRET_KEY = 'unabletoretrievesecretkeyfromenvfile'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'home',
    'user_auth',
    'property',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
if os.path.exists("env.py"):
    print("Using hosted db")
    DATABASES = {
        'default':  dj_database_url.parse(env_variables.get_db_url())
    }
# else:
#     try:
#         print("Using hosted db")
#         DATABASES = {
#             'default':  dj_database_url.parse(os.environ.get('db_url'))
#         }
#     except:
#         DATABASES = {
#             'default': {
#                'ENGINE': 'django.db.backends.sqlite3',
#                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#             }
#         }

# Set the custom user model as the authentication model
AUTH_USER_MODEL = "user_auth.CustomUser"
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
)
# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # This may need to be changed


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# S3 Details Retrieved from environment variables
if os.path.exists("env.py"):
    AWS_ACCESS_KEY_ID = env_variables.get_aws_access_key()
    AWS_SECRET_ACCESS_KEY = env_variables.get_aws_secret_key()
    AWS_STORAGE_BUCKET_NAME = env_variables.get_bucket_name()
    IMAGE_BUCKET_URL = env_variables.get_instrument_image_url() 
    PROPERTY_IMAGE_PATH = f"https://{IMAGE_BUCKET_URL}/" 